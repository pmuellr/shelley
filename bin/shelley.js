// Generated by CoffeeScript 1.3.2
var Options, PROGRAM, Version, bundleDirectory, commandBundle, error, fs, getVersion, help, log, logVerbose, main, mime, nopt, parseCommandLine, path, printVersion;

fs = require("fs");

path = require("path");

nopt = require("nopt");

mime = require("mime");

PROGRAM = path.basename(process.argv[1]);

Version = null;

Options = {};

main = function() {
  var args, command, _ref;
  _ref = parseCommandLine(), command = _ref[0], args = _ref[1], Options = _ref[2];
  if (!command) {
    help();
  }
  if (Options.help) {
    help();
  }
  if (command === "help") {
    help();
  }
  if (Options.version) {
    printVersion();
  }
  if (command === "bundle") {
    return commandBundle(args);
  } else {
    return error("command not valid: '" + command + "'");
  }
};

commandBundle = function(args) {
  var directoryName, output, outputFile, packageName, stat;
  directoryName = args[0];
  if (!directoryName) {
    error("no directory name specified for bundle command");
  }
  directoryName = path.resolve(directoryName);
  if (!path.existsSync(directoryName)) {
    error("directory does not exist: '" + args[0] + "'");
  }
  stat = fs.statSync(directoryName);
  if (!stat.isDirectory()) {
    error("directory name is not a directory: '" + args[0] + "'");
  }
  outputFile = Options.output || "./shelley-bundle.js";
  packageName = Options["package"] || path.basename(directoryName);
  logVerbose("generating package " + packageName + " in file " + outputFile + " from " + directoryName);
  output = [];
  bundleDirectory(packageName, directoryName, output);
  try {
    return fs.writeFileSync(outputFile, output.join("\n"));
  } catch (e) {
    return error("error writing file " + outputFile + ": " + e);
  }
};

bundleDirectory = function() {};

printVersion = function() {
  console.log(getVersion());
  return process.exit();
};

parseCommandLine = function() {
  var args, command, knownOpts, options, parsed, shortHands;
  knownOpts = {
    debug: Boolean,
    out: String,
    "package": String,
    verbose: Boolean,
    version: Boolean,
    help: Boolean
  };
  shortHands = {
    d: ["--debug"],
    o: ["--output"],
    p: ["--package"],
    v: ["--verbose"],
    V: ["--version"],
    "?": ["--help"]
  };
  parsed = nopt(knownOpts, shortHands, process.argv, 2);
  args = parsed.argv.remain || [];
  command = args.shift() || "help";
  options = parsed;
  delete options.argv;
  return [command, args, options];
};

error = function(message) {
  message = "" + PROGRAM + ": " + message;
  console.error(message);
  return process.exit(1);
};

log = function(message) {
  message = "" + PROGRAM + ": " + message;
  return console.log(message);
};

logVerbose = function(message) {
  if (Options.verbose) {
    return log(message);
  }
};

getVersion = function() {
  var json, packageJsonName, values;
  if (Version) {
    return Version;
  }
  packageJsonName = path.join(path.dirname(fs.realpathSync(__filename)), '../package.json');
  json = fs.readFileSync(packageJsonName, 'utf8');
  values = JSON.parse(json);
  Version = values.version;
  return Version;
};

help = function() {
  var message;
  message = "bundles files in a directory for shelley\n\nusage: " + PROGRAM + " option* command arguments*\n\noptions:\n   -d --debug       generate debuggable output\n   -o --output      name of the output file\n   -p --package     name of the package\n   -v --verbose     be verbose\n   -V --version     print the version\n   -? --help        print this help\n\ncommands:\n\n   bundle <directory>\n   \n       Bundles all the files in <directory>.  The \n       <directory> parameter is required.\n\n       The default package name is the basename of the \n       directory.\n       \n       The default output file is ./shelley-bundle.js.";
  console.log(message);
  return process.exit();
};

main();
